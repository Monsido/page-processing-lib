import tseslint from 'typescript-eslint';
import tsParser from '@typescript-eslint/parser';
import stylistic from '@stylistic/eslint-plugin';

export default tseslint.config([
    {
        languageOptions: {
            parser: tsParser,
            ecmaVersion: 2021,
            sourceType: 'module',
        },
        plugins: {
            '@stylistic': stylistic,
            '@typescript-eslint': tseslint.plugin,
        },
        files: ['src/**/*.ts'],
        rules: {
            '@stylistic/arrow-parens': 'off',
            '@stylistic/block-spacing': ['error', 'always'],
            '@stylistic/brace-style': 'error',
            '@stylistic/comma-dangle': ['error', 'always-multiline'],
            '@stylistic/comma-spacing': 'off',
            '@stylistic/comma-style': 'error',
            '@stylistic/computed-property-spacing': 'error',
            '@stylistic/eol-last': 'error',
            '@stylistic/func-call-spacing': 'error',
            '@stylistic/generator-star-spacing': ['error', 'after'],
            '@stylistic/indent': ['error', 4],
            '@stylistic/key-spacing': 'error',
            '@stylistic/keyword-spacing': 'error',
            '@stylistic/linebreak-style': 'error',
            '@stylistic/max-len': ['warn', {
                code: 160,
                ignorePattern: '^import\\s.+\\sfrom\\s.+;$',
                ignoreUrls: true,
                tabWidth: 4,
            }],
            '@stylistic/newline-per-chained-call': 'off',
            '@stylistic/no-mixed-spaces-and-tabs': 'error',
            '@stylistic/no-multi-spaces': 'error',
            '@stylistic/no-multiple-empty-lines': ['error', {
                max: 2,
            }],
            '@stylistic/no-tabs': 'error',
            '@stylistic/no-trailing-spaces': 'error',
            '@stylistic/object-curly-spacing': ['error', 'always'],
            '@stylistic/operator-linebreak': ['error', 'after', {
                overrides: {
                    ':': 'before',
                    '?': 'before',
                },
            }],
            '@stylistic/padded-blocks': 'off',
            '@stylistic/quote-props': 'off',
            '@stylistic/quotes': ['error', 'single', {
                allowTemplateLiterals: true,
            }],
            '@stylistic/rest-spread-spacing': 'error',
            '@stylistic/semi': 'error',
            '@stylistic/semi-spacing': 'error',
            '@stylistic/space-before-blocks': 'error',
            '@stylistic/space-before-function-paren': 'error',
            '@stylistic/space-in-parens': ['error', 'never'],
            '@stylistic/space-infix-ops': 'error',
            '@stylistic/space-unary-ops': ['error', {
                nonwords: false,
                overrides: {},
            }],
            '@stylistic/spaced-comment': ['error', 'always'],
            '@stylistic/switch-colon-spacing': 'error',
            '@stylistic/wrap-iife': 'off',
            '@stylistic/yield-star-spacing': ['error', 'after'],
            '@typescript-eslint/explicit-function-return-type': 'error',
            '@typescript-eslint/explicit-module-boundary-types': 'off',
            '@typescript-eslint/naming-convention': ['error', {
                selector: 'variable',
                format: ['camelCase', 'UPPER_CASE', 'PascalCase', 'snake_case'],
                leadingUnderscore: 'allow',
                trailingUnderscore: 'allow',
            }, {
                selector: 'typeLike',
                format: ['camelCase', 'PascalCase'],
            }, {
                selector: 'property',
                format: null,
            }, {
                selector: 'parameter',
                format: ['camelCase', 'PascalCase'],
            }],
            '@typescript-eslint/no-empty-function': 'off',
            '@typescript-eslint/no-explicit-any': 'error',
            '@typescript-eslint/no-incompatible-type-binding': 'off',
            '@typescript-eslint/no-inferrable-types': 'off',
            '@typescript-eslint/no-non-null-assertion': 'error',
            '@typescript-eslint/no-prototype-builtins': 'off',
            '@typescript-eslint/no-shadow': ['error', {
                hoist: 'all',
            }],
            '@typescript-eslint/no-unused-vars': ['error', {
                args: 'none',
                caughtErrors: 'none',
            }],
            '@typescript-eslint/no-use-before-define': ['error', {
                classes: false,
                functions: false,
            }],
            'array-bracket-newline': 'off',
            'array-bracket-spacing': ['error', 'never'],
            'array-element-newline': 'off',
            'camelcase': 'off',
            'constructor-super': 'error',
            'curly': 'error',
            'guard-for-in': 'error',
            'new-cap': 'error',
            'no-array-constructor': 'error',
            'no-caller': 'error',
            'no-case-declarations': 'off',
            'no-console': 'error',
            'no-empty': 'off',
            'no-extend-native': 'error',
            'no-extra-bind': 'error',
            'no-invalid-this': 'error',
            'no-irregular-whitespace': 'error',
            'no-multi-str': 'error',
            'no-new-object': 'error',
            'no-new-symbol': 'error',
            'no-new-wrappers': 'error',
            'no-this-before-super': 'error',
            'no-throw-literal': 'error',
            'no-unexpected-multiline': 'error',
            'no-unused-vars': ['error', {
                caughtErrors: 'none',
                args: 'none',
            }],
            'no-var': 'error',
            'no-with': 'error',
            'one-var': ['error', 'never'],
            'prefer-const': ['error', {
                destructuring: 'all',
            }],
            'prefer-promise-reject-errors': 'error',
            'prefer-rest-params': 'error',
            'prefer-spread': 'error',
            'require-jsdoc': 'off',
        },
    },
]);
